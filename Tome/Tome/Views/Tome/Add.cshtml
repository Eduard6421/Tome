@model Tome.Models.TomeViewModel
@using Microsoft.AspNet.Identity
@{
    ViewBag.Title = "Add";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://cloud.tinymce.com/stable/tinymce.min.js"></script>

<script>
    tinymce.init({
        images_upload_url: '/Tome/Upload',
        selector: '#content_html',
        plugins: [
            "advlist autolink lists link image charmap print preview hr anchor pagebreak",
            "searchreplace wordcount visualblocks visualchars code fullscreen",
            "insertdatetime media nonbreaking save table contextmenu directionality",
            "emoticons template paste textcolor colorpicker textpattern imagetools"
        ],
    });

    function upload(form) {
        console.log(form)
        tinymce.activeEditor.uploadImages(function (success) {
            form.submit();
        });
        return false;
    }
</script>

<div class="pb-2 mt-4 mb-2 border border-bottom">
    <h2>Create a new tome</h2>
</div>
@using (Html.BeginForm("Add", "Tome", FormMethod.Post, new { onsubmit = "return upload(this);" })) { 
        <div class="form-group">
            <div class="form-text mb-5">
                <label for="Name">Tome Name</label>
                @Html.TextBoxFor(m => m.ReferredTome.Name)
                @Html.ValidationMessageFor(m => m.ReferredTome.Name, "", new { @class = "text-danger" })
            </div>
            <div class="form-check mb-4">
                <!---<input class="form-check-input" type="checkbox" value="" id="defaultCheck" name="IsPrivate">-->
                @if (Request.IsAuthenticated)
                { 
                    @Html.CheckBoxFor(m => m.ReferredTome.IsPrivate)
                    <label class="form-check-label" for="defaultCheck"> IsPrivate </label>
                }
            </div>
            @Html.TextBoxFor(m => m.TomeContent.Content, new { @id = "content_html", @row = 30, @name = "data" })


            <button type="submit">Save Tome</button>

        </div>
        @Html.DropDownListFor(m => m.SelectedTag,Model.TagList)
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}